{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Madupa Dilshan\\\\Desktop\\\\project\\\\job-board-app\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [jobs, setJobs] = useState([]);\n  const [categories, setCategories] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState('All Categories');\n  const [loading, setLoading] = useState(true); // New state for loading\n  const [error, setError] = useState(null); // New state for errors\n\n  // Fetch jobs from backend API\n  useEffect(() => {\n    const fetchJobs = async () => {\n      setLoading(true);\n      try {\n        const response = await fetch('http://localhost:5000/api/jobs');\n        const data = await response.json();\n        setJobs(data);\n\n        // Extract unique categories\n        const uniqueCategories = [...new Set(data.map(job => job.category))];\n        setCategories(['All Categories', ...uniqueCategories]);\n      } catch (error) {\n        setError('Failed to fetch jobs'); // Handle fetch error\n        console.error('Error fetching jobs:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchJobs();\n  }, []);\n\n  // Filter jobs by selected category\n  const filteredJobs = selectedCategory === 'All Categories' ? jobs : jobs.filter(job => job.category === selectedCategory);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Job Board\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      value: selectedCategory,\n      onChange: e => setSelectedCategory(e.target.value),\n      children: categories.map((category, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: category,\n        children: category\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading jobs...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: filteredJobs.length > 0 ? filteredJobs.map(job => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: job.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: job.company\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: job.location\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: job.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 15\n        }, this)]\n      }, job._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"No jobs available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"Jopwv8O6v3xS37RZ3oW6UM8ppW8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","App","_s","jobs","setJobs","categories","setCategories","selectedCategory","setSelectedCategory","loading","setLoading","error","setError","fetchJobs","response","fetch","data","json","uniqueCategories","Set","map","job","category","console","filteredJobs","filter","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","index","length","title","company","location","description","_id","_c","$RefreshReg$"],"sources":["C:/Users/Madupa Dilshan/Desktop/project/job-board-app/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst App = () => {\n  const [jobs, setJobs] = useState([]);\n  const [categories, setCategories] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState('All Categories');\n  const [loading, setLoading] = useState(true);  // New state for loading\n  const [error, setError] = useState(null);  // New state for errors\n\n  // Fetch jobs from backend API\n  useEffect(() => {\n    const fetchJobs = async () => {\n      setLoading(true);\n      try {\n        const response = await fetch('http://localhost:5000/api/jobs');\n        const data = await response.json();\n        setJobs(data);\n\n        // Extract unique categories\n        const uniqueCategories = [\n          ...new Set(data.map(job => job.category)),\n        ];\n        setCategories(['All Categories', ...uniqueCategories]);\n      } catch (error) {\n        setError('Failed to fetch jobs');  // Handle fetch error\n        console.error('Error fetching jobs:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchJobs();\n  }, []);\n\n  // Filter jobs by selected category\n  const filteredJobs = selectedCategory === 'All Categories'\n    ? jobs\n    : jobs.filter(job => job.category === selectedCategory);\n\n  return (\n    <div>\n      <h1>Job Board</h1>\n\n      {/* Category Filter */}\n      <select\n        value={selectedCategory}\n        onChange={(e) => setSelectedCategory(e.target.value)}\n      >\n        {categories.map((category, index) => (\n          <option key={index} value={category}>\n            {category}\n          </option>\n        ))}\n      </select>\n\n      {/* Loading or Error Message */}\n      {loading && <p>Loading jobs...</p>}\n      {error && <p>{error}</p>}\n\n      {/* Job Listings */}\n      <ul>\n        {filteredJobs.length > 0 ? (\n          filteredJobs.map((job) => (\n            <li key={job._id}>\n              <h2>{job.title}</h2>\n              <p>{job.company}</p>\n              <p>{job.location}</p>\n              <p>{job.description}</p>\n            </li>\n          ))\n        ) : (\n          <li>No jobs available</li>\n        )}\n      </ul>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}