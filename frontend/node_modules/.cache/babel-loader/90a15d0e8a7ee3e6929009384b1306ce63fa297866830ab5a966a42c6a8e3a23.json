{"ast":null,"code":"const express = require('express');\nconst mongoose = require('mongoose');\nconst cors = require('cors');\nconst dotenv = require('dotenv');\nconst path = require('path');\nconst jobRoutes = require('./routes/jobRoutes');\nconst applicationRoutes = require('./routes/applicationRoutes');\nconst authRoutes = require('./routes/authRoutes');\n\n// Load environment variables from .env file\ndotenv.config();\nconst app = express();\n\n// Middleware\napp.use(express.json());\napp.use(express.urlencoded({\n  extended: true\n}));\napp.use(cors({\n  origin: 'http://localhost:3000',\n  // Frontend's URL\n  credentials: true\n}));\n\n// Serve static files from uploads directory\napp.use('/uploads', express.static(path.join(__dirname, 'uploads')));\n\n// MongoDB Connection\nconst connectDB = async () => {\n  try {\n    await mongoose.connect(process.env.MONGO_URI, {\n      useNewUrlParser: true,\n      useUnifiedTopology: true\n    });\n    console.log('MongoDB connected');\n  } catch (err) {\n    console.error('MongoDB connection error:', err);\n    process.exit(1);\n  }\n};\nconnectDB();\n\n// Routes\napp.use('/api/jobs', jobRoutes);\napp.use('/api/applications', applicationRoutes);\napp.use('/api/auth', authRoutes);\n\n// Logging middleware\napp.use((req, res, next) => {\n  console.log(`Incoming Request: ${req.method} ${req.url}`);\n  next();\n});\n\n// Error handling middleware\napp.use((err, req, res, next) => {\n  console.error(err.stack);\n  res.status(500).json({\n    success: false,\n    message: 'Internal Server Error',\n    error: process.env.NODE_ENV === 'development' ? err.message : undefined\n  });\n});\n\n// 404 Handler\napp.use((req, res) => {\n  res.status(404).json({\n    success: false,\n    message: 'Endpoint not found'\n  });\n});\n\n// Server Configuration\nconst PORT = process.env.PORT || 5000;\nconst server = app.listen(PORT, () => {\n  console.log(`Server running on port ${PORT}`);\n});\n\n// Handle unhandled promise rejections\nprocess.on('unhandledRejection', err => {\n  console.error('Unhandled Rejection:', err);\n  server.close(() => process.exit(1));\n});\nmodule.exports = app;","map":{"version":3,"names":["express","require","mongoose","cors","dotenv","path","jobRoutes","applicationRoutes","authRoutes","config","app","use","json","urlencoded","extended","origin","credentials","static","join","__dirname","connectDB","connect","process","env","MONGO_URI","useNewUrlParser","useUnifiedTopology","console","log","err","error","exit","req","res","next","method","url","stack","status","success","message","NODE_ENV","undefined","PORT","server","listen","on","close","module","exports"],"sources":["C:/Users/Madupa Dilshan/Desktop/project/job-board-app/frontend/src/App.js"],"sourcesContent":["const express = require('express');\nconst mongoose = require('mongoose');\nconst cors = require('cors');\nconst dotenv = require('dotenv');\nconst path = require('path');\nconst jobRoutes = require('./routes/jobRoutes');\nconst applicationRoutes = require('./routes/applicationRoutes');\nconst authRoutes = require('./routes/authRoutes');\n\n// Load environment variables from .env file\ndotenv.config();\n\nconst app = express();\n\n// Middleware\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\napp.use(cors({ \n  origin: 'http://localhost:3000', // Frontend's URL\n  credentials: true\n}));\n\n// Serve static files from uploads directory\napp.use('/uploads', express.static(path.join(__dirname, 'uploads')));\n\n// MongoDB Connection\nconst connectDB = async () => {\n  try {\n    await mongoose.connect(process.env.MONGO_URI, {\n      useNewUrlParser: true,\n      useUnifiedTopology: true,\n    });\n    console.log('MongoDB connected');\n  } catch (err) {\n    console.error('MongoDB connection error:', err);\n    process.exit(1);\n  }\n};\nconnectDB();\n\n// Routes\napp.use('/api/jobs', jobRoutes);\napp.use('/api/applications', applicationRoutes);\napp.use('/api/auth', authRoutes);\n\n// Logging middleware\napp.use((req, res, next) => {\n  console.log(`Incoming Request: ${req.method} ${req.url}`);\n  next();\n});\n\n// Error handling middleware\napp.use((err, req, res, next) => {\n  console.error(err.stack);\n  res.status(500).json({ \n    success: false,\n    message: 'Internal Server Error',\n    error: process.env.NODE_ENV === 'development' ? err.message : undefined\n  });\n});\n\n// 404 Handler\napp.use((req, res) => {\n  res.status(404).json({\n    success: false,\n    message: 'Endpoint not found'\n  });\n});\n\n// Server Configuration\nconst PORT = process.env.PORT || 5000;\nconst server = app.listen(PORT, () => {\n  console.log(`Server running on port ${PORT}`);\n});\n\n// Handle unhandled promise rejections\nprocess.on('unhandledRejection', (err) => {\n  console.error('Unhandled Rejection:', err);\n  server.close(() => process.exit(1));\n});\n\nmodule.exports = app;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}